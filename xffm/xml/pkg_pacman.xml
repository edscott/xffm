<?xml version="1.0"?>
<rodent_pkg xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="rodent-pkg.xsd">
  <pacman>
    <environment value="false" string="environment variable definitions"/>
    <confirm string="[Yes/No]"/>
<!-- **************************************************************** -->       
        <option loption="noconfirm">
Bypass any and all “Are you sure?” messages. It’s not a good idea to do this unless you want to
run pacman from a script.
        </option>
        <option loption="confirm">
Cancels the effects of a previous --noconfirm.
        </option>
       <option loption="dbpath" parameter="path">
Specify an alternative database location (a typical default is /var/lib/pacman). This should
not be used unless you know what you are doing.  NOTE: If specified, this is an absolute path,
and the root path is not automatically prepended.
        </option>
        <option loption="root" parameter="path">
Specify an alternative installation root (default is /). This should not be used as a way to
install software into /usr/local instead of /usr. This option is used if you want to install a
package on a temporarily mounted partition that is "owned" by another system.  NOTE: If
database path or log file are not specified on either the command line or in pacman.conf(5),
their default location will be inside this root path.
        </option>
        <option loption="verbose">
Output paths such as as the Root, Conf File, DB Path, Cache Dirs, etc.
        </option>
        <option loption="arch" parameter="arch">
Specify an alternate architecture.
        </option>
        <option loption="cachedir" parameter="dir">
Specify an alternative package cache location (a typical default is /var/cache/pacman/pkg).
Multiple cache directories can be specified, and they are tried in the order they are passed to
pacman.  NOTE: This is an absolute path, and the root path is not automatically prepended.
        </option>
        <option loption="color" parameter="always, never, or auto">
Specify when to enable coloring. Valid options are always, never, or auto.  always forces
colors on; never forces colors off; and auto only automatically enables colors when outputting
onto a tty.
        </option>
        <option loption="config" parameter="file">
Specify an alternate configuration file.
        </option>
        <option loption="debug">
Display debug messages. When reporting bugs, this option is recommended to be used.
        </option>
        <option loption="gpgdir" parameter="dir">
Specify a directory of files used by GnuPG to verify package signatures (a typical default is
/etc/pacman.d/gnupg). This directory should contain two files: pubring.gpg and trustdb.gpg.
pubring.gpg holds the public keys of all packagers.  trustdb.gpg contains a so-called trust
database, which specifies that the keys are authentic and trusted.  NOTE: This is an absolute
path, and the root path is not automatically prepended.
        </option>
        <option loption="logfile" parameter="file">
Specify an alternate log file. This is an absolute path, regardless of the installation root
setting.
        </option>
   
<!-- *************************************************************************** -->  
 <!-- *************************************************************************** -->

    <action pkg="pacman" argument="[targets]" string="pacman" 
    protected="1" local="1" remote="1" no_selection="1"
    icon="xffm/emblem_archlinux"  command_options="1" actions="1">
Pacman is a package management utility that tracks installed packages on a Linux
system. It features dependency support, package groups, install and uninstall
scripts, and the ability to sync your local machine with a remote repository to
automatically upgrade packages. Pacman packages are a zipped tar format.

Since version 3.0.0, pacman has been the front-end to libalpm(3), the “Arch Linux
Package Management” library. This library allows alternative front-ends to be
written (for instance, a GUI front-end).

Invoking pacman involves specifying an operation with any potential options and
targets to operate on. A target is usually a package name, file name, URL, or a
search string. Targets can be provided as command line arguments. Additionally, if
stdin is not from a terminal and a single hyphen (-) is passed as an argument,
targets will be read from stdin.
    </action>
   <action pkg="pacman" cmd="-S" argument="package(s)" protected="1" 
    no_selection="" icon="" string="sync">
           Synchronize packages. Packages are installed directly from the remote repositories,
           including all dependencies required to run the packages. For example, pacman -S qt
           will download and install qt and all the packages it depends on. If a package name
           exists in more than one repository, the repository can be explicitly specified to
           clarify the package to install: pacman -S testing/qt. You can also specify version
           requirements: pacman -S "bash>=3.2". Quotes are needed, otherwise the shell
           interprets ">" as redirection to a file.

           In addition to packages, groups can be specified as well. For example, if gnome is
           a defined package group, then pacman -S gnome will provide a prompt allowing you to
           select which packages to install from a numbered list. The package selection is
           specified using a space- and/or comma-separated list of package numbers. Sequential
           packages may be selected by specifying the first and last package numbers separated
           by a hyphen (-). Excluding packages is achieved by prefixing a number or range of
           numbers with a caret (^).

           Packages that provide other packages are also handled. For example, pacman -S foo
           will first look for a foo package. If foo is not found, packages that provide the
           same functionality as foo will be searched for. If any package is found, it will be
           installed. A selection prompt is provided if multiple packages providing foo are
           found.
    <option loption="clean">
           Remove packages that are no longer installed from the cache as well as currently
           unused sync databases to free up disk space. When pacman downloads packages, it
           saves them in a cache directory. In addition, databases are saved for every sync DB
           you download from and are not deleted even if they are removed from the
           configuration file pacman.conf(5). Use one --clean switch to only remove packages
           that are no longer installed; use two to remove all files from the cache. In both
           cases, you will have a yes or no option to remove packages and/or unused downloaded
           databases.
    </option>
    <option loption="groups">
           Display all the members for each package group specified. If no group names are
           provided, all groups will be listed; pass the flag twice to view all groups and
           their members.
    </option>
    <option loption="info">
           Display information on a given sync database package. Passing two --info or -i
           flags will also display those packages in all repositories that depend on this
           package.
    </option>
    <option loption="list">
           List all packages in the specified repositories. Multiple repositories can be
           specified on the command line.
    </option>
    <option loption="quiet">
           Show less information for certain sync operations. This is useful when pacman’s
           output is processed in a script. Search will only show package names and not
           repository, version, group, and description information; list will only show
           package names and omit databases and versions; group will only show package names
           and omit group names.
    </option>
    <option loption="search" parameter="regexp">
           This will search each package in the sync databases for names or descriptions that
           match regexp. When you include multiple search terms, only packages with
           descriptions matching ALL of those terms will be returned.
    </option>
    <option loption="sysupgrade">
           Upgrades all packages that are out-of-date. Each currently-installed package will
           be examined and upgraded if a newer package exists. A report of all packages to
           upgrade will be presented, and the operation will not proceed without user
           confirmation. Dependencies are automatically resolved at this level and will be
           installed/upgraded if necessary.

           Pass this option twice to enable package downgrades; in this case, pacman will
           select sync packages whose versions do not match with the local versions. This can
           be useful when the user switches from a testing repository to a stable one.

           Additional targets can also be specified manually, so that -Su foo will do a system
           upgrade and install/upgrade the "foo" package in the same operation.
    </option>
    <option loption="downloadonly">
           Retrieve all packages from the server, but do not install/upgrade anything.
    </option>
    <option loption="refresh">
           Download a fresh copy of the master package list from the server(s) defined in
           pacman.conf(5). This should typically be used each time you use --sysupgrade or -u.
           Passing two --refresh or -y flags will force a refresh of all package lists, even
           if they appear to be up- to-date.
    </option>

    <option loption="force">
           Bypass file conflict checks and overwrite conflicting files. If the package that is
           about to be installed contains files that are already installed, this option will
           cause all those files to be overwritten. Using --force will not allow overwriting a
           directory with a file or installing packages with conflicting files and
           directories. This option should be used with care, ideally not at all.
    </option>
    <option loption="asdeps">
           Install packages non-explicitly; in other words, fake their install reason to be
           installed as a dependency. This is useful for makepkg and other build-from-source
           tools that need to install dependencies before building the package.
    </option>
    <option loption="asexplicit">
           Install packages explicitly; in other words, fake their install reason to be
           explicitly installed. This is useful if you want to mark a dependency as explicitly
           installed so it will not be removed by the --recursive remove operation.
    </option>
    <option loption="ignore" parameter="package">
           Directs pacman to ignore upgrades of package even if there is one available.
           Multiple packages can be specified by separating them with a comma.
    </option>
    <option loption="ignoregroup" parameter="group">
           Directs pacman to ignore upgrades of all packages in group, even if there is one
           available. Multiple groups can be specified by separating them with a comma.
    </option>
    <option loption="needed">
           Do not reinstall the targets that are already up-to-date.
    </option>

    </action>
    <action pkg="pacman" cmd="-D" argument="package(s)" protected="1" 
    no_selection="" icon="" string="database">
    </action>
    <action pkg="pacman" cmd="-Q" argument="package(s)" 
    no_selection="" icon="" string="query">
    <option loption="changelog">
           View the ChangeLog of a package if it exists.
    </option>
    <option loption="deps">
           Restrict or filter output to packages installed as dependencies. This option can be
           combined with -t for listing real orphans - packages that were installed as
           dependencies but are no longer required by any installed package.
    </option>
    <option loption="explicit">
           Restrict or filter output to explicitly installed packages. This option can be
           combined with -t to list explicitly installed packages that are not required by any
           other package.
    </option>
    <option loption="groups">
           Display all packages that are members of a named group. If a name is not specified,
           list all grouped packages.
    </option>
    <option loption="info">
           Display information on a given package. The -p option can be used if querying a
           package file instead of the local database. Passing two --info or -i flags will
           also display the list of backup files and their modification states.
    </option>
    <option loption="check">
           Check that all files owned by the given package(s) are present on the system. If
           packages are not specified or filter flags are not provided, check all installed
           packages. Specifying this option twice will perform more detailed file checking
           (including permissions, file sizes, and modification times) for packages that
           contain the needed mtree file.
    </option>
    <option loption="list">
           List all files owned by a given package. Multiple packages can be specified on the
           command line.
    </option>
    <option loption="foreign">
           Restrict or filter output to packages that were not found in the sync database(s).
           Typically these are packages that were downloaded manually and installed with
           --upgrade.
    </option>
    <option loption="native">
           Restrict or filter output to packages that are found in the sync database(s). This
           is the inverse filter of --foreign.
    </option>
    <option loption="owns" parameter="file">
           Search for packages that own the specified file(s). The path can be relative or
           absolute, and one or more files can be specified.
    </option>
    <option loption="file">
           Signifies that the package supplied on the command line is a file and not an entry
           in the database. The file will be decompressed and queried. This is useful in
           combination with --info and --list.
    </option>
    <option loption="quiet">
           Show less information for certain query operations. This is useful when pacman’s
           output is processed in a script. Search will only show package names and not
           version, group, and description information; owns will only show package names
           instead of "file is owned by pkg" messages; group will only show package names and
           omit group names; list will only show files and omit package names; check will only
           show pairs of package names and missing files; a bare query will only show package
           names rather than names and versions.
    </option>
    <option loption="search" parameter="regexp">
           Search each locally-installed package for names or descriptions that match regexp.
           When including multiple search terms, only packages with descriptions matching ALL
           of those terms are returned.
    </option>
    <option loption="unrequired">
           Restrict or filter output to packages not required or optionally required by any
           currently installed package. Specify this option twice to only filter packages that
           are direct dependencies (i.e. do not filter optional dependencies).
    </option>
    <option loption="upgrades">
           Restrict or filter output to packages that are out-of-date on the local system.
           Only package versions are used to find outdated packages; replacements are not
           checked here. This option works best if the sync database is refreshed using -Sy.    </option>
   </action>
    <action pkg="pacman" cmd="-R" argument="package(s)" protected="1" 
    no_selection="" icon="" string="remove">
    <option loption="cascade">
           Remove all target packages, as well as all packages that depend on one or more
           target packages. This operation is recursive and must be used with care, since it
           can remove many potentially needed packages.
    </option>
    <option loption="nosave">
           Instructs pacman to ignore file backup designations. Normally, when a file is
           removed from the system, the database is checked to see if the file should be
           renamed with a .pacsave extension.
    </option>
    <option loption="recursive">
           Remove each target specified including all of their dependencies, provided that (A)
           they are not required by other packages; and (B) they were not explicitly installed
           by the user. This operation is recursive and analogous to a backwards --sync
           operation, and it helps keep a clean system without orphans. If you want to omit
           condition (B), pass this option twice.
    </option>
    <option loption="unneeded">
           Removes targets that are not required by any other packages. This is mostly useful
           when removing a group without using the -c option, to avoid breaking any
           dependencies.
    </option>
    </action>
    <action pkg="pacman" cmd="-T" argument="package(s)" protected="1" 
    no_selection="" icon="" string="deptest">
    </action>
    <action pkg="pacman" cmd="-U" argument="file(s)" protected="1" 
    no_selection="" icon="" string="upgrade">
    <option loption="force">
           Bypass file conflict checks and overwrite conflicting files. If the package that is
           about to be installed contains files that are already installed, this option will
           cause all those files to be overwritten. Using --force will not allow overwriting a
           directory with a file or installing packages with conflicting files and
           directories. This option should be used with care, ideally not at all.
    </option>
    <option loption="asdeps">
           Install packages non-explicitly; in other words, fake their install reason to be
           installed as a dependency. This is useful for makepkg and other build-from-source
           tools that need to install dependencies before building the package.
    </option>
    <option loption="asexplicit">
           Install packages explicitly; in other words, fake their install reason to be
           explicitly installed. This is useful if you want to mark a dependency as explicitly
           installed so it will not be removed by the --recursive remove operation.
    </option>
    <option loption="ignore" parameter="package">
           Directs pacman to ignore upgrades of package even if there is one available.
           Multiple packages can be specified by separating them with a comma.
    </option>
    <option loption="ignoregroup" parameter="group">
           Directs pacman to ignore upgrades of all packages in group, even if there is one
           available. Multiple groups can be specified by separating them with a comma.
    </option>
    <option loption="needed">
           Do not reinstall the targets that are already up-to-date.
    </option>
    </action>
    <action pkg="pacman" cmd="-V" argument="" 
    no_selection="" icon="" string="version">
    </action>
    <action pkg="pacman" cmd="-h" argument="action" 
    no_selection="" icon="" string="help" >
    </action>
    <action pkg="pacman" cmd="-Ss" string="Search" icon="xffm/emblem_find"
    no_selection="1" argument="pattern/pkg_name">
    </action>
    <action pkg="pacman" cmd="-S --noconfirm" string="Install" icon="xffm/emblem_greenball"
    protected="1" remote="1" no_selection="1" argument="pkg-name">
Install a package from a remote package repository. 
    </action>
    <action pkg="pacman" cmd="-R --noconfirm" string="Uninstall" icon="xffm/stock_remove"
    protected="1" local="1"  argument="pkg-name">
Delete a package from the database and the system.
    </action>
    <action pkg="pacman" cmd="-Syy" string="Update Database" icon="xffm/stock_refresh"
    protected="1" no_selection="1"
    command_options="1" >
Update the available remote repositories.
    </action>

 </pacman>
</rodent_pkg>
